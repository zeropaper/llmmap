---
import TermDetails from '../components/TermDetails.astro';
import { models } from '../data/models';

import Layout from '../layouts/Layout.astro';
export function getStaticPaths() {
  return models.map(({ modelName }) => ({ params: { modelName } }));
}

const model = models.find(({ modelName }) => modelName === Astro.params.modelName);
const modelName = model!.modelName;

---

<Layout title={`LLMMap - ${modelName}`}>
	<main data-model-name={model?.modelName}>
    <div id="graph-container"></div>
    <TermDetails />
	</main>
</Layout>

<script>
  import { forceDirectedGraph } from '../scripts/forceDirectedGraph';
  const modelName = document.querySelector('[data-model-name]')?.getAttribute('data-model-name');
  const detailsEl = document.querySelector<HTMLDivElement>('.term-details')!;
  function showDetails(term: string, sources: string[], targets: string[]) {
    detailsEl.innerHTML = `<dl><dt>Term:</dt><dd>${term}</dd>
    ${targets.length ? `<dt>Has generated:</dt>
      <dd><ul>${targets.map(association => `<li>${association}</li>`).join('')}</ul>
    </dd>` : ''}
    ${sources.length ? `<dt>Was generated by:</dt>
      <dd><ul>${sources.map(association => `<li>${association}</li>`).join('')}</ul>
    </dd>` : ''}`;
  }
  function hideDetails() {
    detailsEl.innerHTML = '';
  }

  fetch(`/json/terms/${modelName}.json`)
    .then(response => response.json())
    .then((terms: Record<string, string[] | null>) => {
      const container = document.getElementById('graph-container')!;
      const graph = forceDirectedGraph({
        nodes: Object.keys(terms).map(term => ({ id: term, group: 1 })),
        links: Object.entries(terms).flatMap(([source, targets]) => targets ? targets.map(target => ({ source, target, value: 1 })) : [])
      }, {
        nodeId: d => d.id,
        nodeGroup: d => d.group,
        nodeTitle: d => d.id,
        linkStrokeWidth: l => Math.sqrt(l.value),
        width: container.clientWidth,
        height: container.clientHeight,
      });
      graph.querySelectorAll('circle[data-id]').forEach((node: SVGCircleElement) => {
        const sourceLinesSelector = `line[data-source="${node.getAttribute('data-id')}"]`;
        const targetLinesSelector = `line[data-target="${node.getAttribute('data-id')}"]`;
        const id = node.getAttribute('data-id');
        node.addEventListener('mouseover', () => {
          const sources: string[] = [];
          const targets: string[] = [];
          const sourceLines = document.querySelectorAll(sourceLinesSelector) as NodeListOf<SVGLineElement>;
          sourceLines.forEach(sourceLine => {
            sourceLine.setAttribute('stroke', 'lime');
            const targetId = sourceLine.getAttribute('data-target')!;
            targets.push(targetId);
            const targetNode = document.querySelector(`circle[data-id="${targetId}"]`) as SVGCircleElement;
            targetNode.setAttribute('data-original-fill', targetNode.getAttribute('fill') || '');
            targetNode.setAttribute('fill', 'lime');
          });
          const targetLines = document.querySelectorAll(targetLinesSelector) as NodeListOf<SVGLineElement>;
          targetLines.forEach(targetLine => {
            sources.push(targetLine.getAttribute('data-source')!);
            targetLine.setAttribute('stroke', 'yellow');
          });
          showDetails(id!, sources, targets);
        });
        node.addEventListener('mouseout', () => {
          const sourceLines = document.querySelectorAll(sourceLinesSelector) as NodeListOf<SVGLineElement>;
          sourceLines.forEach(sourceLine => {
            sourceLine.removeAttribute('stroke');
            const targetId = sourceLine.getAttribute('data-target');
            const targetNode = document.querySelector(`circle[data-id="${targetId}"]`) as SVGCircleElement;
            targetNode.setAttribute('fill', targetNode.getAttribute('data-original-fill') || '');
            targetNode.removeAttribute('data-original-fill');
          });
          const targetLines = document.querySelectorAll(targetLinesSelector) as NodeListOf<SVGLineElement>;
          targetLines.forEach(targetLine => {
            targetLine.removeAttribute('stroke');
          });
          // hideDetails();
        });
      });
      container.appendChild(graph);
    })
    .catch(err => console.error(err));
</script>

<style>
  main {
    position: relative;
  }
  
  #graph-container {
    position: absolute;
    z-index: 0;
    width: 100%;
    height: 100%;
  }
</style>