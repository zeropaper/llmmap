---
import TermDetails from '../components/TermDetails.astro';
import { models } from '../data/models';

import Layout from '../layouts/Layout.astro';
export function getStaticPaths() {
  return models.map(({ modelName }) => ({ params: { modelName } }));
}

const model = models.find(
  ({ modelName }) => modelName === Astro.params.modelName
);
const modelName = model!.modelName;
---

<Layout title={`LLMMap - ${modelName}`}>
  <main data-model-name={model?.modelName}>
    <div id="graph-container"></div>
    <TermDetails />
  </main>
</Layout>

<script>
  import { forceDirectedGraph } from '../scripts/d3/forceDirectedGraph';
  import { termsToGraphData } from '../scripts/termsToGraphData';
  let selectedNode: SVGCircleElement | null = null;
  let highlightedNode: SVGCircleElement | null = null;

  const modelName = document
    .querySelector('[data-model-name]')
    ?.getAttribute('data-model-name');
  const detailsEl = document.querySelector<HTMLDivElement>('.term-details')!;
  function showDetails(term: string, sources: string[], targets: string[]) {
    detailsEl.innerHTML = `<dl><dt>Term:</dt><dd>${term}</dd>
    ${
      targets.length
        ? `<dt>Has generated:</dt>
      <dd><ul>${targets
        .map((association) => `<li><a>${association}</a></li>`)
        .join('')}</ul>
    </dd>`
        : ''
    }
    ${
      sources.length
        ? `<dt>Was generated by:</dt>
      <dd><ul>${sources
        .map((association) => `<li><a>${association}</a></li>`)
        .join('')}</ul>
    </dd>`
        : ''
    }`;
    detailsEl.querySelectorAll('a').forEach((link) => {
      link.addEventListener('click', (evt) => {
        evt.preventDefault();
        const term = link.textContent!;
        const node = document.querySelector(
          `circle[data-id="${term}"]`
        ) as SVGCircleElement;
        node.dispatchEvent(new MouseEvent('click'));
      });
      link.addEventListener('mouseover', (evt) => {
        const term = link.textContent!;
        const node = document.querySelector(
          `circle[data-id="${term}"]`
        ) as SVGCircleElement;
        highlightedNode = node;
        connectionsHighlightToggle(node, true);
      });
      link.addEventListener('mouseout', (evt) => {
        const term = link.textContent!;
        const node = document.querySelector(
          `circle[data-id="${term}"]`
        ) as SVGCircleElement;
        if (highlightedNode && node === highlightedNode) {
          connectionsHighlightToggle(highlightedNode, false);
        }
        if (selectedNode) {
          connectionsHighlightToggle(selectedNode, true);
        }
      });
    });
  }
  function hideDetails() {
    detailsEl.innerHTML =
      'Hover over a dot to highlight its connections.<br/>Click on a dot to see details.';
  }

  function toggleFill(
    node: SVGCircleElement,
    on: boolean,
    color: string = 'lime'
  ) {
    if (on) {
      node.setAttribute(
        'data-original-fill',
        node.getAttribute('data-original-fill') ||
          node.getAttribute('fill') ||
          ''
      );
      node.setAttribute('fill', color);
      return;
    }
    node.setAttribute('fill', node.getAttribute('data-original-fill') || '');
  }

  function connectionsHighlightToggle(node: SVGCircleElement, on: boolean) {
    const sourceId = node.getAttribute('data-id');
    const sourceLinesSelector = `line[data-source="${sourceId}"]`;
    const targetLinesSelector = `line[data-target="${sourceId}"]`;
    if (on) {
      const sourceLines = document.querySelectorAll(
        sourceLinesSelector
      ) as NodeListOf<SVGLineElement>;
      sourceLines.forEach((sourceLine) => {
        sourceLine.setAttribute('stroke', 'lime');
        sourceLine.setAttribute('stroke-width', '2');
        const targetId = sourceLine.getAttribute('data-target')!;
        const targetNode = document.querySelector(
          `circle[data-id="${targetId}"]`
        ) as SVGCircleElement;
        toggleFill(targetNode, true, 'red');
        targetNode.setAttribute('r', '8');
      });
      const targetLines = document.querySelectorAll(
        targetLinesSelector
      ) as NodeListOf<SVGLineElement>;
      targetLines.forEach((targetLine) => {
        targetLine.setAttribute('stroke', 'yellow');
        targetLine.setAttribute('stroke-width', '2');
        const targetNode = document.querySelector(
          `circle[data-id="${targetLine.getAttribute('data-source')}"]`
        ) as SVGCircleElement;
        toggleFill(targetNode, true, 'orange');
        targetNode.setAttribute('r', '8');
      });

      toggleFill(node, true, selectedNode === node ? 'lime' : 'orange');
      node.setAttribute('r', '10');
      return;
    }

    const sourceLines = document.querySelectorAll(
      sourceLinesSelector
    ) as NodeListOf<SVGLineElement>;
    sourceLines.forEach((sourceLine) => {
      sourceLine.removeAttribute('stroke');
      sourceLine.removeAttribute('stroke-width');
      const targetId = sourceLine.getAttribute('data-target');
      const targetNode = document.querySelector(
        `circle[data-id="${targetId}"]`
      ) as SVGCircleElement;
      toggleFill(targetNode, false);
      targetNode.setAttribute('r', '5');
    });
    const targetLines = document.querySelectorAll(
      targetLinesSelector
    ) as NodeListOf<SVGLineElement>;
    targetLines.forEach((targetLine) => {
      targetLine.removeAttribute('stroke');
      targetLine.removeAttribute('stroke-width');
      const targetNode = document.querySelector(
        `circle[data-id="${targetLine.getAttribute('data-source')}"]`
      ) as SVGCircleElement;
      toggleFill(targetNode, false);
      targetNode.setAttribute('r', '5');
    });

    toggleFill(node, false);
    node.setAttribute('r', '5');
  }

  function getSourcesAndTargets(node: SVGCircleElement): [string[], string[]] {
    const id = node.getAttribute('data-id');
    const sourceLinesSelector = `line[data-source="${id}"]`;
    const targetLinesSelector = `line[data-target="${id}"]`;
    const sources: string[] = [];
    const targets: string[] = [];
    const sourceLines = document.querySelectorAll(
      sourceLinesSelector
    ) as NodeListOf<SVGLineElement>;
    sourceLines.forEach((sourceLine) => {
      targets.push(sourceLine.getAttribute('data-target')!);
    });
    const targetLines = document.querySelectorAll(
      targetLinesSelector
    ) as NodeListOf<SVGLineElement>;
    targetLines.forEach((targetLine) => {
      sources.push(targetLine.getAttribute('data-source')!);
    });

    return [sources, targets];
  }

  function attachEventListeners(node: SVGCircleElement) {
    const id = node.getAttribute('data-id')!;

    // when clicking, the node is selected or deselected
    node.addEventListener('click', () => {
      console.info(
        'node clicked',
        selectedNode === node ? 'deselecting' : 'selecting'
      );
      if (selectedNode === node) {
        connectionsHighlightToggle(node, false);
        selectedNode = null;
        hideDetails();
        return;
      }
      if (selectedNode) connectionsHighlightToggle(selectedNode, false);
      connectionsHighlightToggle(node, true);
      selectedNode = node;
      showDetails(id, ...getSourcesAndTargets(node));
    });

    node.addEventListener('mouseover', () => {
      highlightedNode = node;
      connectionsHighlightToggle(node, true);
      showDetails(id, ...getSourcesAndTargets(node));
    });
    node.addEventListener('mouseout', () => {
      connectionsHighlightToggle(node, false);
      if (selectedNode) connectionsHighlightToggle(selectedNode, true);
      selectedNode
        ? showDetails(id, ...getSourcesAndTargets(selectedNode))
        : hideDetails();
    });
  }

  fetch(`/json/terms/${modelName}.json`)
    .then((response) => response.json())
    .then((terms: Record<string, string[] | null>) => {
      const container = document.getElementById('graph-container')!;

      const graph = forceDirectedGraph(termsToGraphData(terms), {
        nodeId: (d) => d.id,
        nodeGroup: (d) => d.group,
        nodeTitle: (d) => d.id,
        linkStrokeWidth: (l) => Math.sqrt(l.value),
        width: container.clientWidth,
        height: container.clientHeight,
      });

      graph.querySelectorAll('circle[data-id]').forEach(attachEventListeners);

      container.appendChild(graph);
    })
    .catch((err) => console.error(err));

  hideDetails();
</script>

<style>
  main {
    position: relative;
  }

  #graph-container {
    position: absolute;
    z-index: 0;
    width: 100%;
    height: 100%;
  }
</style>
