---
import TermDetails from '../components/TermDetails.astro';
import { models } from '../data/models';

import Layout from '../layouts/Layout.astro';
export function getStaticPaths() {
  return models.map(({ modelName }) => ({ params: { modelName } }));
}

const model = models.find(({ modelName }) => modelName === Astro.params.modelName);
const modelName = model!.modelName;

---

<Layout title={`LLMMap - ${modelName}`}>
	<main data-model-name={model?.modelName}>
    <div id="graph-container"></div>
    <TermDetails />
	</main>
</Layout>

<script>
  import { forceDirectedGraph } from '../scripts/d3/forceDirectedGraph';
  import { termsToGraphData } from '../scripts/termsToGraphData';
  
  const modelName = document.querySelector('[data-model-name]')?.getAttribute('data-model-name');
  const detailsEl = document.querySelector<HTMLDivElement>('.term-details')!;
  function showDetails(term: string, sources: string[], targets: string[]) {
    detailsEl.innerHTML = `<dl><dt>Term:</dt><dd>${term}</dd>
    ${targets.length ? `<dt>Has generated:</dt>
      <dd><ul>${targets.map(association => `<li>${association}</li>`).join('')}</ul>
    </dd>` : ''}
    ${sources.length ? `<dt>Was generated by:</dt>
      <dd><ul>${sources.map(association => `<li>${association}</li>`).join('')}</ul>
    </dd>` : ''}`;
    detailsEl.querySelectorAll('li').forEach(li => {
      li.addEventListener('click', () => {
        const term = li.textContent!;
        const node = document.querySelector(`circle[data-id="${term}"]`) as SVGCircleElement;
        node.dispatchEvent(new MouseEvent('click'));
      });
    });
  }
  function hideDetails() {
    detailsEl.innerHTML = 'Hover over a dot to highlight its connections.<br/>Click on a dot to see details.';
  }

  function connectionsHighlightToggle(node: SVGCircleElement, on: boolean) {
    const sourceId = node.getAttribute('data-id');
    const sourceLinesSelector = `line[data-source="${sourceId}"]`;
    const targetLinesSelector = `line[data-target="${sourceId}"]`;
    if (on) {
      const sourceLines = document.querySelectorAll(sourceLinesSelector) as NodeListOf<SVGLineElement>;
      sourceLines.forEach(sourceLine => {
        sourceLine.setAttribute('stroke', 'lime');
        const targetId = sourceLine.getAttribute('data-target')!;
        const targetNode = document.querySelector(`circle[data-id="${targetId}"]`) as SVGCircleElement;
        targetNode.setAttribute('data-original-fill',
          targetNode.getAttribute('data-original-fill')
          || targetNode.getAttribute('fill')
          || ''
        );
        targetNode.setAttribute('fill', 'lime');
      });
      const targetLines = document.querySelectorAll(targetLinesSelector) as NodeListOf<SVGLineElement>;
      targetLines.forEach(targetLine => {
        targetLine.setAttribute('stroke', 'yellow');
      });
      return;
    } 

    const sourceLines = document.querySelectorAll(sourceLinesSelector) as NodeListOf<SVGLineElement>;
    sourceLines.forEach(sourceLine => {
      sourceLine.removeAttribute('stroke');
      const targetId = sourceLine.getAttribute('data-target');
      const targetNode = document.querySelector(`circle[data-id="${targetId}"]`) as SVGCircleElement;
      targetNode.setAttribute('fill', targetNode.getAttribute('data-original-fill') || '');
    });
    const targetLines = document.querySelectorAll(targetLinesSelector) as NodeListOf<SVGLineElement>;
    targetLines.forEach(targetLine => {
      targetLine.removeAttribute('stroke');
    });
  }

  function getSourcesAndTargets(node: SVGCircleElement): [string[], string[]] {
    const id = node.getAttribute('data-id');
    const sourceLinesSelector = `line[data-source="${id}"]`;
    const targetLinesSelector = `line[data-target="${id}"]`;
    const sources: string[] = [];
    const targets: string[] = [];
    const sourceLines = document.querySelectorAll(sourceLinesSelector) as NodeListOf<SVGLineElement>;
    sourceLines.forEach(sourceLine => {
      targets.push(sourceLine.getAttribute('data-target')!);
    });
    const targetLines = document.querySelectorAll(targetLinesSelector) as NodeListOf<SVGLineElement>;
    targetLines.forEach(targetLine => {
      sources.push(targetLine.getAttribute('data-source')!);
    });

    return [sources, targets];
  }

  fetch(`/json/terms/${modelName}.json`)
    .then(response => response.json())
    .then((terms: Record<string, string[] | null>) => {
      const container = document.getElementById('graph-container')!;

      const graph = forceDirectedGraph(termsToGraphData(terms), {
        nodeId: d => d.id,
        nodeGroup: d => d.group,
        nodeTitle: d => d.id,
        linkStrokeWidth: l => Math.sqrt(l.value),
        width: container.clientWidth,
        height: container.clientHeight,
      });

      let selectedNode: SVGCircleElement | null = null;
      graph.querySelectorAll('circle[data-id]').forEach((node: SVGCircleElement) => {
        const id = node.getAttribute('data-id')!;

        node.addEventListener('click', () => {
          if (selectedNode === node) {
            selectedNode = null;
            connectionsHighlightToggle(node, false);
            hideDetails();
            return;
          }
          selectedNode = node;
          connectionsHighlightToggle(node, true);
          showDetails(id, ...getSourcesAndTargets(node));
        });

        node.addEventListener('mouseover', () => {
          connectionsHighlightToggle(node, true);
          showDetails(id, ...getSourcesAndTargets(node));
        });
        node.addEventListener('mouseout', () => {
          connectionsHighlightToggle(node, false);
          selectedNode
            ? showDetails(id, ...getSourcesAndTargets(selectedNode))
            : hideDetails();
        });
      });

      container.appendChild(graph);
    })
    .catch(err => console.error(err));

hideDetails();
</script>

<style>
  main {
    position: relative;
  }
  
  #graph-container {
    position: absolute;
    z-index: 0;
    width: 100%;
    height: 100%;
  }
</style>